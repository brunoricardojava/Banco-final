/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Banco;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;

/**
 *
 * @author Edu
 */
public class Menu1 extends javax.swing.JFrame {

    /**
     * Creates new form Menu1
     */
    
    public Menu1() {
        initComponents();
    }

    public Menu1(Conta c1,Poupança c2,Especial c3){
        initComponents();
        this.c1 = c1;
        this.c2=c2;
        this.c3=c3;
    }
    Conta c1;
    Poupança c2;
    Especial c3;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Sacar = new javax.swing.JButton();
        Extrato = new javax.swing.JButton();
        Depositar = new javax.swing.JButton();
        Transferenciabancaria = new javax.swing.JButton();
        Sacarpoup = new javax.swing.JButton();
        Depositarpoup = new javax.swing.JButton();
        Tranferirpoup = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Sacar.setText("Sacar");
        Sacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SacarActionPerformed(evt);
            }
        });

        Extrato.setText("Extrato");
        Extrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtratoActionPerformed(evt);
            }
        });

        Depositar.setText("Depositar");
        Depositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositarActionPerformed(evt);
            }
        });

        Transferenciabancaria.setText("Transfêrencia bancaria");
        Transferenciabancaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferenciabancariaActionPerformed(evt);
            }
        });

        Sacarpoup.setText("Sacar");
        Sacarpoup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SacarpoupActionPerformed(evt);
            }
        });

        Depositarpoup.setText("Depositar");
        Depositarpoup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositarpoupActionPerformed(evt);
            }
        });

        Tranferirpoup.setText("Transferir para conta corrente");
        Tranferirpoup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TranferirpoupActionPerformed(evt);
            }
        });

        jLabel1.setText("           Conta Corrente");

        jLabel2.setText("           Conta Poupança");

        jLabel3.setText("      Conta especial");

        jButton1.setText("Sacar com limite");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tranferencia com limite");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Conferir dia de rendimento");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(Transferenciabancaria, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                                .addComponent(Depositar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Sacar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Depositarpoup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Sacarpoup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Tranferirpoup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Extrato)
                        .addGap(167, 167, 167))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)))
                    .addComponent(jButton3))
                .addGap(117, 117, 117))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Sacar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Depositar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Transferenciabancaria))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Sacarpoup)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Depositarpoup, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Tranferirpoup)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(Extrato)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SacarActionPerformed
        // TODO add your handling code here:
        c1.sacar();
    }//GEN-LAST:event_SacarActionPerformed

    private void ExtratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtratoActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Nome : " + c1.getCliente() + "\n"
                + "Número da conta : " + c1.getNum_Conta() + "\n"
                + "Saldo : " + c1.getSaldo() + "\n"
                + "Saldo na poupança : " + c2.getsaldopopanca() + "\n"
                + "Dia de rendimento : " + c2.getdiaderendimento() + "\n"
                + "Limite : " + c3.getlimite() + "\n"
                + "Quantidade de saques realizados : " + (c1.getSaques() + c2.getSaques()) + " (limite de 4 saques diários)", "Extrato", 1);
    }//GEN-LAST:event_ExtratoActionPerformed

    private void DepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositarActionPerformed
        // TODO add your handling code here:
        c1.depositar();
    }//GEN-LAST:event_DepositarActionPerformed

    private void TransferenciabancariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferenciabancariaActionPerformed
        // TODO add your handling code here:
        c1.transferenciabancaria();
    }//GEN-LAST:event_TransferenciabancariaActionPerformed

    private void SacarpoupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SacarpoupActionPerformed
        // TODO add your handling code here:
        c2.sacar();
    }//GEN-LAST:event_SacarpoupActionPerformed

    private void DepositarpoupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositarpoupActionPerformed
        // TODO add your handling code here:
        c2.depositar();
    }//GEN-LAST:event_DepositarpoupActionPerformed

    private void TranferirpoupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TranferirpoupActionPerformed
        // TODO add your handling code here:
        c2.diminuirpopanca();
    }//GEN-LAST:event_TranferirpoupActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        c3.sacar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        c3.depositar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        c2.novoSaldo();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Depositar;
    private javax.swing.JButton Depositarpoup;
    private javax.swing.JButton Extrato;
    private javax.swing.JButton Sacar;
    private javax.swing.JButton Sacarpoup;
    private javax.swing.JButton Tranferirpoup;
    private javax.swing.JButton Transferenciabancaria;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}

class Conta {

    private String cliente;
    private int num_conta, saques=0;
    private double saldo,saque, deposito;
    private String resposta;

   void setCliente(String Cliente){
    this.cliente = Cliente;
  }

  void setNum_Conta(int Num_Conta){
    this.num_conta = Num_Conta;
  }

  void setSaldo(double Saldo){
    this.saldo = Saldo;
  }

  String getCliente(){
    return this.cliente;
  }

  int getNum_Conta(){
    return this.num_conta;
  }

  double getSaldo(){
    return this.saldo;
  }
  void setDeposito(double Deposito){
    this.deposito = Deposito;
  }
  double getDeposito(){
    return this.deposito;
  }
  
  void setResposta(String Resposta){
    this.resposta = Resposta;
  }
  String getResposta(){
    return this.resposta;
  }
  void setSaque(double Saque){
    this.saque = Saque;
  }
  double getSaque(){
    return this.saque;
  }
  void setSaques(int Saques){
    this.saques = Saques;
  }
  int getSaques(){
    return this.saques;
  }
    public Conta(String nome, int conta, double saldo_inicial) {
        this.cliente = nome;
        this.num_conta = conta;
        saldo = saldo_inicial;
    }

    public void sacar() {
        
        try{
        resposta = JOptionPane.showInputDialog(null, "Quanto deseja sacar ?", "Saque",QUESTION_MESSAGE);
        saque=Double.parseDouble(resposta);
        } catch(Exception e){
             JOptionPane.showMessageDialog(null, "Erro 404, dinheiro não encontrado !!!", "Erro de saque 404", 0);
        }
        while (saque < 0 || saque > saldo){
             resposta = JOptionPane.showInputDialog(null, "Quanto deseja sacar ?", "Saque",QUESTION_MESSAGE);
             saque=Double.parseDouble(resposta);
        }
        if (saques < 4) {
            saques++;
            saldo-=saque;
            JOptionPane.showMessageDialog(null, "Saque efetuado com sucesso !", "Confirmação", 1);
            } 
        else {
                JOptionPane.showMessageDialog(null, "Limite de saques diários atingido , volte amanhã ! ;)", "Limite de saques", 0);
            }
    }

    public void depositar() {
        try{
        resposta=JOptionPane.showInputDialog(null, "Quanto deseja depositar na conta ?", "Deposito",QUESTION_MESSAGE);
        deposito= Double.parseDouble(resposta);
        } catch(Exception e){
             JOptionPane.showMessageDialog(null, "Erro 404, dinheiro não depositado !!!", "Erro de deposito 404", 0);
        }
        while (deposito < 0 ){
             resposta=JOptionPane.showInputDialog(null, "Quanto deseja depositar na poupança ?", "Deposito",QUESTION_MESSAGE);
             deposito= Double.parseDouble(resposta);
        }
        saldo+=deposito;
        JOptionPane.showMessageDialog(null, "Deposito efetuado com sucesso !", "Confirmação", 1);
    }
    public void transferenciabancaria(){
        try{
        resposta=JOptionPane.showInputDialog(null, "Quanto deseja transferir para a outra conta ?", "Transferência",QUESTION_MESSAGE);
        deposito= Double.parseDouble(resposta);
        } catch(Exception e){
             JOptionPane.showMessageDialog(null, "Erro 414, transferencia não efetuada !!!", "Erro de transferencia 404", 0);
        }
        while (deposito < 0 || deposito > saldo) {
        resposta=JOptionPane.showInputDialog(null, "Quanto deseja transferir para a outra conta ?", "Transferência",QUESTION_MESSAGE);
        deposito= Double.parseDouble(resposta);
        }
        saldo-=deposito;
        JOptionPane.showMessageDialog(null, "Tranferência efetuada com sucesso !", "Confirmação", 1);
    }
}

class Poupança extends Conta {

    Poupança(String nome, int num_conta, double saldo) {
        super(nome, num_conta, saldo);
    }
    SimpleDateFormat data = new SimpleDateFormat("dd");
    Random gerador = new Random();
    private final int diaderendimento = gerador.nextInt(29)+1;
    private double saldopopanca;
    int getdiaderendimento(){
        return diaderendimento;
    }
    double getsaldopopanca(){
        return saldopopanca;
    }
    void setsaldopopanca(double valor){
        this.saldopopanca=valor;
    }

    @Override
    public void sacar() {
        super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja sacar ?", "Saque",QUESTION_MESSAGE));
        super.setSaque(Double.parseDouble(super.getResposta()));
        while (super.getSaque() < 0 || super.getSaque()>saldopopanca){
             super.setResposta(JOptionPane.showInputDialog(null, "Valor invalido, digite novamente ?", "Saque",QUESTION_MESSAGE));
             super.setSaque(Double.parseDouble(super.getResposta()));
        }
        if (super.getSaques() < 4) {
            super.setSaques(super.getSaques()+1);
            saldopopanca-=super.getSaque();
            JOptionPane.showMessageDialog(null, "Saque efetuado com sucesso !", "Confirmação", 1);
            } 
        else {
                JOptionPane.showMessageDialog(null, "Limite de saques diários atingido , volte amanhã ! ;)", "Limite de saques", 0);
            }
    }

    void novoSaldo() {
        if (data.format(Calendar.getInstance().getTime()).equals(String.valueOf(diaderendimento))) {
            super.setSaldo(super.getSaldo()+ super.getSaldo()*0.05);
            JOptionPane.showMessageDialog(null, "Dia de rendimento, você agora possui " + super.getSaldo());
        } else {
            JOptionPane.showMessageDialog(null, "Hoje não é o dia de rendimento, seu saldo ainda é " + super.getSaldo(), null, 0);
        }
    }

    @Override
    public void depositar() {
        super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja depositar na poupança ?", "Deposito",QUESTION_MESSAGE));
        super.setDeposito(Double.parseDouble(super.getResposta()));
        while (super.getDeposito() < 0 ){
             super.setResposta(JOptionPane.showInputDialog(null, "Valor invalido, digite novamente ?", "Deposito",QUESTION_MESSAGE));
             super.setDeposito(Double.parseDouble(super.getResposta()));
        }
        saldopopanca+=super.getDeposito();
        JOptionPane.showMessageDialog(null, "Deposito efetuado com sucesso !", "Confirmação", 1);
    } 
    public void diminuirpopanca(){
        super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja tranferir da poupança para sua conta?", "Tranferência entre contas",QUESTION_MESSAGE));
        super.setDeposito(Double.parseDouble(super.getResposta()));
        while (super.getDeposito() < 0 || super.getDeposito() > saldopopanca){
             super.setResposta(JOptionPane.showInputDialog(null, "Valor invalido, digite novamente ?", "Tranferência entre contas",QUESTION_MESSAGE));
             super.setDeposito(Double.parseDouble(super.getResposta()));
        }
        saldopopanca-=super.getDeposito();
        super.setSaldo(super.getSaldo()+super.getDeposito());
        JOptionPane.showMessageDialog(null, "Deposito efetuado com sucesso !", "Confirmação", 1);
    }
    
}

class Especial extends Conta {

    Especial(String nome, int num_conta, double saldo) {
        super(nome, num_conta, saldo);
    }
    private double limite = super.getSaldo()*0.1;

    void setLimite(double limite) {
        this.limite = limite;
    }
    double getlimite(){
        return this.limite;
    }

    @Override
    public void sacar() {
        super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja sacar ?", "Saque com limite",QUESTION_MESSAGE));
        super.setSaque(Double.parseDouble(super.getResposta()));
        while (super.getSaque() < 0 || super.getSaque()> super.getSaldo()+limite){
             super.setResposta(JOptionPane.showInputDialog(null, "Valor invalido, digite novamente ?", "Saque com limite",QUESTION_MESSAGE));
             super.setSaque(Double.parseDouble(super.getResposta()));
        }
        if (super.getSaques() < 4) {
            super.setSaques(super.getSaques()+1);
            super.setSaldo(super.getSaldo()-super.getSaque());
            JOptionPane.showMessageDialog(null, "Saque efetuado com sucesso !", "Confirmação", 1);
            } 
        else {
                JOptionPane.showMessageDialog(null, "Limite de saques diários atingido , volte amanhã ! ;)", "Limite de saques", 0);
            }
    }
     @Override
    public void transferenciabancaria(){
        super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja transferir para a outra conta ?", "Transferência com limite",QUESTION_MESSAGE));
        super.setDeposito(Double.parseDouble(super.getResposta()));
        while (super.getDeposito() < 0 || super.getDeposito() > super.getSaldo()) {
            super.setResposta(JOptionPane.showInputDialog(null, "Quanto deseja transferir para a outra conta ?", "Transferência com limite",QUESTION_MESSAGE));
            super.setDeposito(Double.parseDouble(super.getResposta()));
        }
        super.setSaldo(super.getSaldo()-super.getDeposito());
        JOptionPane.showMessageDialog(null, "Tranferência efetuada com sucesso !", "Confirmação", 1);
        }
}
